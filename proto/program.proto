syntax = "proto3";
package org.solana.compat.program;

import "sysvars.proto";

// A set of feature flags.
message FeatureSet {
    // Every item in this list marks an enabled feature. The value of
    // each item is the first 8 bytes of the feature ID as a little-
    // endian integer.
    repeated fixed64 features = 1;
}

// The complete state of an account excluding its public key.
message AcctState {
    // The account key. Can be omitted if obvious from the context.
    bytes address = 1;

    uint64 lamports = 2;
    bytes data = 3;
    bool executable = 4;
    uint64 rent_epoch = 5;
    bytes owner = 6;
}

message InstrAcct {
    // Selects an account in an external list
    uint32 index = 1;
    bool is_signer = 2;
    bool is_writable = 3;
}

// The execution context of an instruction. Contains all required
// information to independently replay an instruction.
message InstrContext {
    // The program invoked.
    bytes program_id = 1;

    // The BPF loader ID if the program_id is a user deployed program.
    bytes loader_id = 2;

    FeatureSet feature_set = 3;

    SysvarContext sysvars = 4;

    // Account state accessed by the instruction.
    repeated AcctState accounts = 5;

    // Account access list for this instruction (refers to above accounts list)
    repeated InstrAcct instr_accounts = 6;

    // The input data passed to program execution.
    bytes data = 7;
}

// The results of executing an InstrContext.
message InstrEffects {
    // result is zero if the instruction executed successfully.
    // Otherwise, a non-zero error code. Error codes are implementation
    // defined.
    int32 result = 1;

    // Some error cases additionally have a custom error code. Unlike
    // the expected_result, this is stable across clients.
    uint64 custom_err = 2;

    // Copies of accounts that were changed. May be in an arbitrary
    // order. The pubkey of each account is unique in this list. Each
    // account address modified here must also be in the
    // InstrContext.
    repeated AcctState modified_accounts = 3;
}

// An instruction processing test fixture.
message InstrFixture {
    InstrContext input = 1;
    InstrEffects output = 2;
}
